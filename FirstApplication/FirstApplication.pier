!A first application

In this chapter, we will develop a simple game: *Lights Out>http://en.wikipedia.org/wiki/Lights_Out_(game)*. Along the way we will demonstrate most of the tools that Pharo programmers use to construct and debug their programs, and show how programs are exchanged with other developers. We will see the browser, the object inspector, the debugger and the Monticello package browser. Development in Smalltalk is efficient: you will find that you spend far more time actually writing code and far less managing the development process. This is partly because the Smalltalk language is very simple, and partly because the tools that make up the programming environment are very well integrated with the language.

!!The Lights Out game

To show you how to use Pharo's programming tools, we will build a simple game called Lights Out. The game board consists of rectangular array of light yellow cells. When you click on one of the cells with the mouse, the four surrounding cells turn blue. Click again, and they toggle back to light yellow. The object of the game is to turn blue as many cells as possible.

The Lights Out game is made up of two kinds of objects: the game board itself, and 100 individual cell objects. The Pharo code to implement the game will contain two classes: one for the game and one for the cells. We will now show you how to define these classes using the Pharo programming tools.

!!Creating new Package

We have already seen the browser in Chapter 1, where we learned how to navigate to classes and methods, and saw how to define new methods. Now we will see how to create packages, categories and classes.

Type the name of the new package (we will use PBE-LightsOut) in the dialog
box and click ""accept"" (or just press the return key); the new package is created,and positioned alphabetically in the list of packages.

!!Defining the class LOCell

As yet there are of course no classes in the new package. However, the main editing pane displays a template to make it easy to create a new class

This template shows us a Smalltalk expression that sends a message to a class called Object, asking it to create a subclass called ""NameOfSubClass"". The new class has no variables, and should belong to the category ""PBE-LightsOut"".

!!!On Categories and Packages

Historically, Smalltalk only knows about categories, not packages. You may well ask, what is the difference ? A category is simply a collection of related classes in a Smalltalk image. A package is a collection of related classes and extension methods that may be versioned using the Monticello versioning tool. By convention, package names and category names are the same. For most purposes we do not care about the difference, but we will be careful to use the correct terminology in this book since there are points where the difference is crucial. We will learn more when we start working with Monticello.

!!!Creating a new class

We simply modify the template to create the class that we really want.

Modify the class creation template as follows:

-Replace Object by SimpleSwitchMorph.
-Replace NameOfSubClass by LOCell.
-Add mouseAction to the list of instance variables.


The result should look like this:

[[[lang=Smalltalk
SimpleSwitchMorph subclass: #LOCell
instanceVariableNames: 'mouseAction'
classVariableNames: '' poolDictionaries: ''
category: 'PBE-LightsOut']]]

This new definition consists of a Smalltalk expression that sends a message to the existing class SimpleSwitchMorph, asking it to create a subclass called LOCell. (Actually, since LOCell does not exist yet, we passed as an argument the symbol \#LOCell which stands for the name of the class to create.) We also tell it that instances of the new class should have a mouseAction instance variable, which we will use to define what action the cell should take if the mouse should click over it.

At this point you still have not created anything. Note that the border of the class template pane has changed to red . This means that there are unsaved changes. To actually send this message, you must accept it.

Either right-click and select ""accept"", or use the shortcut CMD-s (for "save"). The message will be sent to ""SimpleSwitchMorph"", which will cause
the new class to be compiled.


Once the class definition is accepted, the class will be created and appear in the classes pane of the browser . The editing pane now shows the class definition, and a small pane below it will remind you to write a few words describing the purpose of the class. This is called a class comment, and it is quite important to write one that will give other programmers a high-level overview of the purpose of this class. Smalltalkers put a very high value on the readability of their code, and detailed comments in methods are unusual: the philosophy is that the code should speak for itself. (If it doesn't, you should refactor it until it does!) A class comment need not contain a detailed description of the class, but a few words describing its overall purpose are vital if programmers who come after you are to know whether to spend time looking at this class.

!!Adding methods to a class


Now let's add some methods to our class.

Select the protocol \-\-all\-\- in the protocol pane.You will see a template for method creation in the editing pane. Select it, and replace it by the text of method :

[[[lang=Smalltalk

initialize
super initialize.
self label: ''.
self borderWidth: 2.
bounds := 0@0 corner: 16@16.
offColor := Color paleYellow.
onColor := Color paleBlue darker.
self useSquareCorners.
self turnOff]]]

Note that the characters \'\' on line 3 are two separate single quotes with nothing between them, not a double quote! \'\' denotes the empty string.

""Accept"" this method definition.

Notice that the method is called ""initialize"". The name is very significant! By convention, if a class defines a method named ""initialize"", it will be called right after the object is created. So, when we evaluate LOCell new, the message initialize will be sent automatically to this newly created object. Initialize methods are used to set up the state of objects, typically to set their instance variables; this is exactly what we are doing here.

The first thing that this method does (line 2) is to execute the initialize method of its superclass, SimpleSwitchMorph. The idea here is that any inherited state will be properly initialized by the initialize method of the superclass. It is always a good idea to initialize inherited state by sending super initialize before doing anything else; we don't know exactly what SimpleSwitchMorphâ€™s initialize method will do, and we don't care, but it's a fair bet that it will set up some instance variables to hold reasonable default values, so we had better call it, or we risk starting in an unclean state.

The rest of the method sets up the state of this object. Sending self label: \'\', for example, sets the label of this object to the empty string.

The expression 0\@0 corner: 16\@16 probably needs some explanation. 0\@0 represents a Point object with x and y coordinates both set to 0. In fact, 0\@0 sends the message @ to the number 0 with argument 0. The effect will be that the number 0 will ask the Point class to create a new instance with coordinates (0,0). Now we send this newly created point the message corner: 16\@16, which causes it to create a Rectangle with corners 0\@0 and 16\@16. This newly created rectangle will be assigned to the bounds variable, inherited from the superclass.

Note that the origin of the Pharo screen is the top left, and the y coordinate increases downwards.

The rest of the method should be self-explanatory. Part of the art of writing good Smalltalk code is to pick good method names so that Smalltalk code can be read like a kind of pidgin English. You should be able to imagine the object talking to itself and saying \"Self use square corners!\", \"Self turn off\!\".

!!Inspecting an object

You can test the effect of the code you have written by creating a new LOCell object and inspecting it.

Open a workspace. Type the expression LOCell new and ""inspect"" it .

The left-hand pane of the inspector shows a list of instance variables; if you select one (try bounds), the value of the instance variable is shown in the right pane.

The bottom pane of the inspector is a mini-workspace. It's useful because in this workspace the pseudo-variable self is bound to the object selected.

Select the LOCell at the root of the inspector window. Type the text self bounds: (200\@200 corner: 250\@250) in the bottom pane and ""do it"". The bounds variable should change in the inspector. Now type the text self openInWorld in the mini-workspace and ""do it"".

The cell should appear near the top left-hand corner of the screen, indeed, exactly where its bounds say that it should appear. Alt-Shift-Left click on the cell to bring up the morphic halo. Move the cell with the brown (next to top-right) handle and resize it with the yellow (bottom-right) handle. Notice how the bounds reported by the inspector also change. (You may have to left click
refresh to see the new bounds value.)


Delete the cell by clicking on the x in the pink handle.
